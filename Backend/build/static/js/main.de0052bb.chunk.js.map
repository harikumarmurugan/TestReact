{"version":3,"sources":["Stores/UserStore.js","ButtonField.js","inputField.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedin","username","ButtonField","className","disabled","props","onClick","text","React","Component","InputField","type","placeholder","value","onChange","e","target","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","isLoggedIn","resetForm","alert","msg","console","log","setInputvalue","doLofin","App","UserName","userName","doLogout","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de0052bb.chunk.js","sourcesContent":["import {extendObservable} from 'mobx';\r\n\r\nclass UserStore{\r\n    constructor()\r\n    {\r\n        extendObservable(this,{\r\n\r\n            loading:false,\r\n            isLoggedin:false,\r\n            username:''\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\n\r\nclass ButtonField extends React.Component\r\n{\r\n  render(){\r\n    return (\r\n        <div className=\"submitButton\">\r\n            <button\r\n                className='btn'\r\n                disabled={this.props.disabled}\r\n                onClick= {() => this.props.onClick()}\r\n            >\r\n                {this.props.text}\r\n\r\n                </button>\r\n        </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonField;\r\n","import React from 'react';\r\n\r\n\r\nclass InputField extends React.Component\r\n{\r\n  render(){\r\n    return (\r\n        <div className=\"inputField\">\r\n            <input  className='input' type={this.props.type}\r\n             placeholder={this.props.placeholder}\r\n             value ={this.props.value }\r\n             onChange={(e)=> this.props.onChange(e.target.value)}   \r\n            \r\n            />\r\n            \r\n        </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport UserStore from './Stores/UserStore';\r\nimport  ButtonField from './ButtonField';\r\nimport InputField from './inputField';\r\n\r\nclass LoginForm extends React.Component\r\n{\r\nconstructor(props)\r\n{\r\n    super(props);\r\n    this.state={\r\n\r\n        username:'',\r\n        password:'',\r\n        buttonDisabled:false\r\n    }\r\n}\r\n\r\nsetInputvalue(property,val)\r\n{\r\nval=val.trim();\r\nif(val.length > 12 )\r\n{\r\n    return;\r\n}\r\nthis.setState({\r\n    [property]:val\r\n})\r\n\r\n}\r\n\r\nresetForm(){\r\n    this.setState={\r\n\r\n        username:'',\r\n        password:'',\r\n        buttonDisabled:false\r\n    }\r\n\r\n}\r\n\r\nasync doLofin(){\r\n    if(!this.state.username)\r\n    return;\r\n    if(!this.state.password)\r\n    return; \r\n    this.setState({\r\n        buttonDisabled:true\r\n    })\r\n\r\n    try{\r\n\r\n        let res=await fetch('/login',{\r\n            method:'post',\r\n            headers:{\r\n                'Accept':'application/json',\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify({\r\n                 username:this.state.username,\r\n                 password:this.state.password   \r\n            })\r\n\r\n\r\n        });\r\n\r\n        let result=await res.json();\r\n        if(result && result.success)\r\n        {\r\n            UserStore.username=result.username;\r\n            UserStore.isLoggedIn=true;\r\n\r\n        }\r\n        else\r\n        {\r\n            this.resetForm();\r\n            alert(result.msg);\r\n        }\r\n\r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(e);\r\n        this.resetForm();\r\n    }\r\n\r\n}\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"loginForm\">\r\n            Log in\r\n            <InputField            \r\n            type='text'\r\n            placeholder='Username'\r\n            value={this.state.username ? this.state.username:''}\r\n            onChange={((val) => this.setInputvalue('username',val))}\r\n\r\n            />\r\n             <InputField            \r\n            type='password'\r\n            placeholder='Password'\r\n            value={this.state.password ? this.state.password:''}\r\n            onChange={((val) => this.setInputvalue('password',val))}\r\n\r\n            />\r\n             <ButtonField \r\n                  text={'Log in'} \r\n                  disabled={this.state.buttonDisabled}\r\n                  onClick={()=>this.doLofin()}\r\n                 />\r\n        </div> \r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\n//import { observe} from 'mobx-react'\nimport UserStore from './Stores/UserStore';\nimport LoginForm from './Login';\nimport InputField from './inputField';\nimport ButtonField from './ButtonField';\nimport './App.css';\n\nclass App extends React.Component\n{\n\n  async componentDidMount()\n  {\n\n    try{\n        let res= await fetch('/isLoggedIn',{\n        method:'Post',\n        headers:        {\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n        }\n\n        })\n\n        let result= await res.json();\n\n        if(result && result.success){\n              UserStore.loading=false;\n              UserStore.isLoggedIn=true;\n              UserStore.UserName=result.userName;\n        }\n        else\n        {\n          UserStore.loading=false;\n          UserStore.isLoggedIn=false;\n          UserStore.UserName=result.userName;\n\n        }\n\n    }\n    catch(e){\n        \n      UserStore.loading=false;\n      UserStore.isLoggedIn=false;\n    }\n\n  }\n\n  async doLogout()\n  {\n\n    try{\n        let res= await fetch('/logout',{\n        method:'Post',\n        headers:\n        {\n          'Accept':'application/json',\n          'Content-Type':'application/json'\n        }\n\n        })\n\n        let result=await res.json();\n\n        if(result && result.success){\n              UserStore.loading=false;\n              UserStore.isLoggedIn=false;\n              UserStore.UserName='';\n        }\n\n    }\n    catch(e){\n        console.log(e);\n    }\n\n  }\n\n  render(){\n    \n    if (UserStore.loading)\n    {\n       return(\n         <div className=\"app\">\n              <div className=\"container\">\n               Loading, please wait...\n                </div>\n         </div>\n       ); \n    }\n    else\n    {\n    if (UserStore.isLoggedIn)\n    {\n       return(\n         <div className=\"app\">\n              <div className=\"container\">\n                 Welcome {UserStore.UserName}\n                 <ButtonField \n                  text={'Log out'} \n                  disabled={false}\n                  onClick={()=>this.doLogout()}\n                 />\n                 </div>\n         </div>\n       ); \n    }\n    return (\n        <div className=\"app\">\n        <div className=\"container\">\n            <LoginForm/>\n            </div>\n        </div> \n        );\n    } \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}